# Build OpenAssetIO, push an artifact, and test it, all in one handy workflow.

name: Build and Test
on:
  workflow_dispatch:
  pull_request:
    branches-ignore:
      - docs
    paths-ignore:
      - 'docs/**'
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: ${{ matrix.config.os }}-${{matrix.config.build-type}}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        # We can't properly align to the VFX Reference Platform as this
        # requires glibc 2.17, which is older than any of the available
        # environments.
        config:
          # No Windows debug, Dosen't work on actions (easily)
          # It's hard to get a python debug lib.
        - os: windows-2019
          preamble: call "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\VC\\Auxiliary\\Build\\vcvarsall.bat" x64
          shell: cmd
          build-type: RelWithDebInfo
          run-on-prs: true
        - os: windows-2019
          preamble: call "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\VC\\Auxiliary\\Build\\vcvarsall.bat" x64
          shell: cmd
          build-type: Release
          run-on-prs: false
        - os: ubuntu-20.04
          shell: bash
          build-type: Debug
          run-on-prs: false
        - os: ubuntu-20.04
          shell: bash
          build-type: RelWithDebInfo
          run-on-prs: true
        - os: ubuntu-20.04
          shell: bash
          build-type: Release
          run-on-prs: false
          # MacOS toolchain doesn't search /usr/local by default:
          # https://gitlab.kitware.com/cmake/cmake/-/issues/19120
          # The CMake FindPython module's Python::Python target (used
          # via pybind11::embed in python-bridge-test) transitively adds
          # linker flags to system libs, which fail due to this issue.
        - os: macos-11
          preamble: export LDFLAGS="-L/usr/local/lib"
          shell: bash
          build-type: Debug
          run-on-prs: false
        - os: macos-11
          preamble: export LDFLAGS="-L/usr/local/lib"
          shell: bash
          build-type: RelWithDebInfo
          run-on-prs: true
        - os: macos-11
          preamble: export LDFLAGS="-L/usr/local/lib"
          shell: bash
          build-type: Release
          run-on-prs: false

        # Dosen't work on actions, It's hard to get a python debug lib.
        exclude:
          - config:
              os: "windows-2019"
              build-type: "Debug"
    defaults:
      run:
        # Annoyingly required here since `matrix` isn't available in
        # the `shell` property of individual steps.
        shell: ${{ matrix.config.shell }}

    steps:
    # It's very expensive to build our full release matrix when doing
    # iteration on a branch, so only build a single type per platform.
    - name: Exit early for redundant branch builds
      if: github.ref != 'refs/heads/main' && matrix.config.run-on-prs == false
      run: exit 0 # Exit with a status code of 0 to indicate success

    - uses: actions/checkout@v4

    - name: Bootstrap
      uses: ./.github/bootstrap_platform

     # We don't want to publish the test build, it gets too big.
    - name: Build and Install (No tests)
      if: github.ref == 'refs/heads/main' || matrix.config.run-on-prs == true
      run: >
        ${{ matrix.config.preamble }}

        cmake -S . -B build -G Ninja
        --install-prefix ${{ github.workspace }}/dist
        --toolchain ${{ github.workspace }}/.conan/conan_paths.cmake
        -DCMAKE_BUILD_TYPE=${{matrix.config.build-type}}

        cmake --build build

        cmake --install build

    - name: Get compiler information
      id: compiler_info
      shell: bash
      # Search the cmake info for the compiler information, remove the
      # env var labels, and dequote it.
      run: |
        COMPILER_VERSION=$(cmake --system-information | grep -E "^CMAKE_CXX_COMPILER_VERSION " | cut -d ' ' -f2 | tr -d '"')
        COMPILER_ID=$(cmake --system-information | grep -E "^CMAKE_CXX_COMPILER_ID " | cut -d ' ' -f2 | tr -d '"')
        PYTHON_VERSION=$(python -V | sed 's/ /-/')
        echo "compiler_id=$COMPILER_ID" >> $GITHUB_OUTPUT
        echo "compiler_version=$COMPILER_VERSION" >> $GITHUB_OUTPUT
        echo "python_version=$PYTHON_VERSION" >> $GITHUB_OUTPUT

    - name: Upload archive
      if: github.ref == 'refs/heads/main' || matrix.config.run-on-prs == true
      uses: actions/upload-artifact@v4
      with:
        name: ${{runner.os}}-${{runner.arch}}-${{matrix.config.build-type}}-${{ steps.compiler_info.outputs.compiler_id }}-${{ steps.compiler_info.outputs.compiler_version }}-${{ steps.compiler_info.outputs.python_version }}
        path: |
          ${{ github.workspace }}/dist

    # Reconfigure to add the test target. Ctest should rebuild using
    # the cached build from prior.
    - name: Test
      if: github.ref == 'refs/heads/main' || matrix.config.run-on-prs == true
      run: >
        ${{ matrix.config.preamble }}

        cmake --preset test build

        ctest -VV --test-dir build --parallel 2

  docs:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout source
      uses: actions/checkout@v4

    - name: Test
      run: |
        echo "::add-matcher::./.github/workflows/problem-matchers/doxygen.json"
        # Problem matches don't actually error a step, so we have to
        # manually check for warnings/errors at the end. Capture the
        # output so we can parse it later.
        set -o pipefail
        make -C doc/doxygen 2>&1 | tee doxygen-log.txt
        echo "::remove-matcher owner=doxygen::"
        # Fail the job if we have Doxygen warning/error lines in the
        # output. NB: This is the same regex as doxygen.json, adapted
        # to work with GNU grep.
        ! grep -qE "^.*?/src/[^:]+:[0-9]+: ?[a-zA-Z]+: ?.*$" doxygen-log.txt

    - name: Expose archive docs artifact
      uses: actions/upload-artifact@v3
      with:
        name: doxygen-documentation
        path: doc/doxygen/html

  disallowed-phrases:
    runs-on: ubuntu-latest
    name: Disallowed phrases

    steps:
    - name: Checkout source
      uses: actions/checkout@v4

      # Check that the acronym version of OpenAssetIO isn't in use in
      # the code base, see:
      #   https://github.com/OpenAssetIO/OpenAssetIO/issues/153
      # NB: The quotes deliberately avoid the string in question
      # appearing in this file, and failing the test.
    - name: Ambiguous acronym
      run: >
        ! grep -ir "o""aio" .

      # Check that we always use the `OPENASSETIO_`-prefixed pybind11
      # override macros. Uses Perl regexp with negative lookbehind.
    - name: pybind11 macros
      run: >
        ! grep -Pr '(?<!OPENASSETIO_)PYBIND11_OVERRIDE'
        --exclude overrideMacros.hpp --exclude-dir _openassetio_test src
