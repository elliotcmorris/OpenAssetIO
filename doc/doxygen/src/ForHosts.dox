/*!
 * @page notes_for_hosts Notes for API Host Developers
 *
 * @section host_architecture Architecture Summary
 *
 * - In OpenAssetIO, a '@ref host' is an application, tool or script
 *   that makes use of the API to interact with an @ref asset_management_system.
 *   This could be anything from a simple pipeline script to a
 *   full-blown Digital Content Creation application. We use this term
 *   as the host is the thing responsible for 'hosting' the API, and
 *   instantiating one or more instances of the API classes that
 *   represent an asset management system.
 *
 * - Hosts interact with an @ref asset_management_system through an
 *   instance of the @ref openassetio.hostApi.Manager "Manager" class.
 *   The @fqref{hostApi.ManagerFactory} "ManagerFactory" class is used
 *   to instantiate this instance for any given manager. The Manager
 *   class wraps the implementation of the API by a specific asset
 *   manager to help with state management.
 *
 * - In order to use the API, every host must provide an
 *   implementation of the @ref HostInterface class. This represents the
 *   application or tool in a generic fashion <i>to</i> the asset
 *   management system. This allows the manager to adapt its behavior
 *   if necessary.
 *
 * - The specific implementation of the @ref HostInterface class
 *   provided by a host when creating a ManagerFactory is wrapped in the
 *   @fqref{managerApi.Host} "Host" class before being exposed to the
 *   manager. This is to allow for assorted middleware auditing/logging
 *   functionality, and provide a degree of isolation against future API
 *   changes.
 *
 * - The main currency in the interactions with a @ref manager is the
 *   @ref entity_reference. These are URIs that uniquely identify an
 *   @ref entity within the management system. The form of an entity
 *   reference is entirely determined by the manager. They must be
 *   considered to be opaque handles by the host, even if they look like
 *   well-formed strings.
 *
 * - Nearly all interactions with a @ref openassetio.hostApi.Manager
 *   "Manager" require an appropriately configured @ref Context. This
 *   tells the @ref asset_management_system about the intended actions
 *   of the host. For example, whether an @ref entity_reference is being
 *   @ref glossary_resolve "resolved" for read or for write.
 *
 * - The lifetime of the Context can be carefully managed by the host
 *   to allow the manager to correlate and time-lock disparate API calls.
 *
 * - It's in the host's interest to provide as much information in the
 *   @ref Context and any @ref entity or @ref locale @ref Specification
 *   "Specifications" supplied to API calls as possible. For example,
 *   it is strongly advised to use or extend standard @ref locale
 *   "locales" depending on which part of a host is making API calls.
 *   This allows the manager to correctly filter assets or adapt its
 *   behavior as required.
 *
 * - You should resolve an entity reference with the minimal set of @ref
 * trait "traits" required, and use resulting data as the authoritative
 * source of information about an asset. For example, to determine the
 * final colorspace of an image.
 *
 * @section host_reading Recommended Reading
 *
 * @see @ref entities_traits_and_specifications
 * @see @fqref{hostApi.ManagerFactory} "ManagerFactory"
 * @see @fqref{hostApi.Manager} "Manager"
 * @see @fqref{Context} "Context"
 *
 * @section host_todo Implementation Check List
 *
 * @subsection host_todo_required_resolution Required for Simple Resolution
 *
 * - Implement the @fqref{hostApi.HostInterface} "HostInterface" class
 *   methods:
 *   @fqref{hostApi.HostInterface.identifier} "identifier" and
 *   @fqref{hostApi.HostInterface.displayName} "displayName".
 *
 * - Use @fqref{hostApi.ManagerFactory.defaultManagerForInterface}
 *   "ManagerFactory.defaultManagerForInterface" to bootstrap the
 *   API, provide the following objects:
 *    - An instance of the custom class derived from
 *      @fqref{hostApi.HostInterface} "HostInterface".
 *    - A `logger` (derived from
 *      @ref openassetio.log.LoggerInterface "LoggerInterface"), for
 *      simple console logging you can use a
 *      @ref openassetio.log.ConsoleLogger "ConsoleLogger" wrapped
 *      in a @ref openassetio.log.SeverityFilter "SeverityFilter".
 *    - A @fqref{hostApi.ManagerImplementationFactoryInterface}
 *      "ManagerImplementationFactoryInterface" capable of instantiating
 *      managers. In the majority of cases a default-configured @ref
 *      openassetio.pluginSystem.PythonPluginSystemManagerImplementationFactory
 *      "PythonPluginSystemManagerImplementationFactory" will be
 *      sufficient.
 *
 *   Note that in some environments, a default manager may not be
 *   configured. As a host, can error here, or choose to present the
 *   user with an additional manual configuration mechanism for your
 *   specific API session if you so wish.
 *
 * - Create, persist and configure a @ref Context as appropriate for
 *   all calls to the API.
 *
 * - Ask the @ref manager if they support resolve for the relevant
 *   data by supplying its @ref trait_set to
 *   @fqref{hostApi.Manager.managementPolicy} "Manager.managementPolicy"
 *   with a @ref Context with `kRead` access, respecting the returned
 *   traits - this may be a subset if the manager is only capable of
 *   resolving some of an entity's traits.
 *
 * - Always check any suspected entity references with
 *   @fqref{hostApi.Manager.isEntityReferenceString}
 *   "Manager.isEntityReferenceString" before passing to any other API
 *   calls.
 *
 * - Provide means for users to 'de-assetize' documents to facilitate
 *   sharing outside of the assetized environment. This usually consists
 *   of resolving any appropriate traits and substituting entity
 *   references or controlled properties with their resolved values.
 *
 * @see @ref examples_api_initialization
 * @see @ref examples_picking_a_manager
 * @see @ref examples_resolving_a_reference
 *
 * @subsection host_todo_required_publishing Required for Publishing
 *
 * - Ask the @ref manager if they support publishing for the relevant
 *   data by supplying its @ref trait_set to
 *   @fqref{hostApi.Manager.managementPolicy} "Manager.managementPolicy"
 *   with a @ref Context with `kWrite` access, respecting the returned
 *   traits. Note that some managers may not be able to persist data for
 *   all of an entity's traits, these traits will be ommited from the
 *   managementPolicy response.
 *
 * - Follow the @fqref{hostApi.Manager.managementPolicy} "policy", @ref
 *   glossary_preflight, @ref glossary_resolve, write, @ref
 *   glossary_register process illustrated @ref
 *   example_publishing_a_file "here" whenever generating new data.
 *
 * - Include in your documentation, any scenarios in which entities are
 *   registered to references known to be of a different @ref trait_set.
 *   For example, an editorial application registering the traits of an
 *   ImageSpecification to a reference with the traits of a
 *   ShotSpecification indicates that the images should be published
 *   "under" that shot.
 *
 * @see @ref example_publishing_a_file
 *
 * @subsection host_todo_recommended Recommended
 *
 * - Present users with the ability to enable and select a @ref
 *   manager to use to interact with an @ref asset_management_system,
 *   storing applicable options, etc...
 *
 * - @fqref{hostApi.Manager.isEntityReferenceString} "Test" and resolve
 *   any strings that may represent file system locations
 *   (@fqref{hostApi.Manager.resolve} "Manager.resolve")
 *
 * - Ensure the use of a correctly configured @ref Context for all
 *   calls to the API.
 *
 * - If a manager's @fqref{hostApi.Manager.managementPolicy}
 *   "managementPolicy" sets the @needsref WantsThumbnail trait, where
 *   possible, generate thumbnails as requested during publishing.
 *
 * - Allow the @needsref ManagerUIDelegate to participate in
 *   browsing/etc... for any data types they have expressed an interest
 *   in managing via @fqref{hostApi.Manager.managementPolicy}
 *   "Manager.managementPolicy".
 *
 * - Make the drawing of any parameters that may hold an @ref
 *   entity_reference delegatable to the @needsref ManagerUIDeleagate.
 *
 * - Create @ref Specification "specifications" for any custom 'asset
 *   types' you may deal with.
 *
 * - You should map any widgets returned by @needsref ManagerUIDelegate.widgets
 *   with the @needsref ui.widgets.attributes.kCreateApplicationPanel flag set to
 *   some native panel type, if you have one.
 *
 * @see @ref example_generating_a_thumbnail
 *
 * @note The UI classes have not yet been migrated from the
 * `FnAssetAPI` code base.
 */
